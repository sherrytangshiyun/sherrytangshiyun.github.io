<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sherry&#39;s blog</title>
    <link>https://sherrytangshiyun.github.io/post/</link>
    <description>Recent content in Posts on Sherry&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sherrytangshiyun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction of hugo</title>
      <link>https://sherrytangshiyun.github.io/post/test/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sherrytangshiyun.github.io/post/test/</guid>
      <description>Hugo is the world&amp;rsquo;s fastest static website engine. It&amp;rsquo;s written in Go (aka Golang) and developed by bep.
 Below you will learn how to build your blog by hugo.
 https://blog.csdn.net/weiqu4386/article/details/106221330/</description>
    </item>
    
    <item>
      <title>TCP三次握手和四次挥手</title>
      <link>https://sherrytangshiyun.github.io/post/test/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sherrytangshiyun.github.io/post/test/</guid>
      <description>TCP三次握手 第一次握手：建立连接时，客户端发送同步序列编号包到服务器，并进入SYN_SENT状态，等待服务器确认； 第二次握手：服务器收到同步序列编号包，必须确认客户的SYN同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。 TCP四次挥手 1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。 2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了关闭等待状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个关闭等待状态持续的时间。 3）客户端收到服务器的确认请求后，此时，客户端就进入终止等待2状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。 4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了最后确认状态，等待客户端的确认。 5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。 6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。 为什么连接的时候是三次握手，关闭的时候要四次握手？ 因为当服务器端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务器端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端FIN报文已收到。只有等到服务器端所有的报文都发送完了才能发送FIN报文，因此不能一起发送。因此总共需要进行四次握手。 为什么不能用两次握手进行连接 因为3次握手完成两个重要的功能，既要双方做好发送数据的准备工作，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。 如果将三次握手改成两次握手，有可能发生死锁。假定客户端和服务器端进行通信。客户端给服务器端发送一个连接请求分组，服务器端接收到了这个分组并发送了确认应答分组。按照两次握手的流程，服务器端认为此时连接已经成功建立了，现在可以开始发送数据分组。可是存在客户端在服务器端的应答分组传输中被丢失的情况下，就不知道服务器端是否准备好。此时客户端认为连接还未建立成功，将忽略服务器端发来的任何数据分组，只等待确认应答分组。而服务器端在发出的分组超时后，重复发送同样的分组，就形成了死锁。 如果已经建立了连接，但是客户端突然出现故障了怎么办 TCP有一个保活计时器，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。 为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？ 按道理，四个报文都发送完毕即可进入CLOSE状态，但是网络是不可靠的，最后一个确认报文有可能丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在客户端发出最后的ACK回复丢失了之后。服务器端没有收到ACK，将不断重复发送FIN。所以客户端不能立即关闭，它必须确认服务器接收到了该ACK。客户端会在发送出ACK之后进入到TIME_WAIT状态。客户端会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那客户端就重发ACK并再次等待2MSL。所谓的2MSL是两倍的一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，客户端都没有再次收到FIN，那客户端会认为ACK已经被成功接收，结束TCP连接。 </description>
    </item>
    
  </channel>
</rss>